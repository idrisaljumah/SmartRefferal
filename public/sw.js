/**
 * Service Worker for offline support and model caching
 * Generated by Workbox, but can be customized
 */

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Precache app shell and seed models
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache model files with CacheFirst strategy
registerRoute(
  ({ url }) => url.pathname.startsWith('/models/'),
  new CacheFirst({
    cacheName: 'models-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 365 * 24 * 60 * 60 // 1 year
      })
    ]
  })
);

// Cache external model downloads
registerRoute(
  ({ url }) => url.origin === 'https://models.example.com',
  new CacheFirst({
    cacheName: 'external-models-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 365 * 24 * 60 * 60
      })
    ]
  })
);

// Cache API responses with NetworkFirst
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60 // 1 day
      })
    ]
  })
);

// Background sync for referral uploads (when user opts in)
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-referrals') {
    event.waitUntil(syncReferrals());
  }
});

async function syncReferrals() {
  console.log('[SW] Syncing referrals...');
  // Implementation would fetch pending referrals from IndexedDB
  // and upload to server if user has opted in
}

// Handle messages from main thread
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

console.log('[SW] Service worker loaded');
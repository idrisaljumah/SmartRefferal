/**
 * Export utilities for PDF and FHIR
 */

import jsPDF from 'jspdf';
import type { ReferralOutput, FHIRReferralRequest } from '../types';

/**
 * Export referral as PDF
 */
export async function exportToPDF(referral: ReferralOutput): Promise<Blob> {
  const doc = new jsPDF();
  const isRTL = referral.language === 'ar';
  
  // Set font (use Arabic-compatible font in production)
  doc.setFont('helvetica');
  
  let yPos = 20;
  const lineHeight = 10;
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  const maxWidth = pageWidth - 2 * margin;
  
  // Title
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  const title = isRTL ? 'طلب إحالة طبية' : 'Clinical Referral Request';
  doc.text(title, pageWidth / 2, yPos, { align: 'center' });
  yPos += lineHeight * 2;
  
  // Metadata
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  const date = new Date(referral.timestamp).toLocaleString(isRTL ? 'ar' : 'en');
  doc.text(`${isRTL ? 'التاريخ' : 'Date'}: ${date}`, margin, yPos);
  yPos += lineHeight;
  doc.text(`${isRTL ? 'المعرف' : 'ID'}: ${referral.id}`, margin, yPos);
  yPos += lineHeight * 1.5;
  
  // Specialty
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(isRTL ? 'التخصص:' : 'Specialty:', margin, yPos);
  doc.setFont('helvetica', 'normal');
  yPos += lineHeight;
  doc.text(referral.specialty, margin + 5, yPos);
  yPos += lineHeight * 1.5;
  
  // Acuteness
  doc.setFont('helvetica', 'bold');
  doc.text(isRTL ? 'مستوى الإلحاح:' : 'Acuteness:', margin, yPos);
  doc.setFont('helvetica', 'normal');
  yPos += lineHeight;
  const acutenessMap = {
    routine: isRTL ? 'روتيني' : 'Routine',
    urgent: isRTL ? 'عاجل' : 'Urgent',
    emergency: isRTL ? 'طارئ' : 'Emergency'
  };
  doc.text(acutenessMap[referral.acuteness], margin + 5, yPos);
  yPos += lineHeight * 1.5;
  
  // Timeframe
  doc.setFont('helvetica', 'bold');
  doc.text(isRTL ? 'الإطار الزمني:' : 'Timeframe:', margin, yPos);
  doc.setFont('helvetica', 'normal');
  yPos += lineHeight;
  doc.text(referral.timeframe, margin + 5, yPos);
  yPos += lineHeight * 1.5;
  
  // Reason
  doc.setFont('helvetica', 'bold');
  doc.text(isRTL ? 'سبب الإحالة:' : 'Reason for Referral:', margin, yPos);
  doc.setFont('helvetica', 'normal');
  yPos += lineHeight;
  const reasonLines = doc.splitTextToSize(referral.reason, maxWidth - 5);
  doc.text(reasonLines, margin + 5, yPos);
  yPos += lineHeight * reasonLines.length + lineHeight;
  
  // Clinical Summary
  doc.setFont('helvetica', 'bold');
  doc.text(isRTL ? 'الملخص السريري:' : 'Clinical Summary:', margin, yPos);
  doc.setFont('helvetica', 'normal');
  yPos += lineHeight;
  const summaryLines = doc.splitTextToSize(referral.clinicalSummary, maxWidth - 5);
  doc.text(summaryLines, margin + 5, yPos);
  yPos += lineHeight * summaryLines.length + lineHeight;
  
  // Confidence
  doc.setFontSize(9);
  doc.setTextColor(128);
  doc.text(
    `${isRTL ? 'مستوى الثقة' : 'Confidence'}: ${(referral.confidence * 100).toFixed(0)}% | ${isRTL ? 'النموذج' : 'Model'}: ${referral.modelUsed}`,
    margin,
    yPos
  );
  
  // Footer
  yPos = doc.internal.pageSize.getHeight() - 15;
  doc.setFontSize(8);
  doc.setTextColor(100);
  const footer = isRTL
    ? 'تم إنشاؤه بواسطة مولد الإحالة السريرية - معالجة محلية آمنة'
    : 'Generated by Clinical Referral Generator - Secure Local Processing';
  doc.text(footer, pageWidth / 2, yPos, { align: 'center' });
  
  return doc.output('blob');
}

/**
 * Export referral as FHIR ReferralRequest
 */
export function exportToFHIR(referral: ReferralOutput): FHIRReferralRequest {
  const priorityMap: Record<string, 'routine' | 'urgent' | 'asap' | 'stat'> = {
    routine: 'routine',
    urgent: 'urgent',
    emergency: 'stat'
  };
  
  return {
    resourceType: 'ReferralRequest',
    id: referral.id,
    status: 'draft',
    intent: 'proposal',
    priority: priorityMap[referral.acuteness] || 'routine',
    subject: {
      reference: 'Patient/unknown' // Replace with actual patient reference
    },
    authoredOn: new Date(referral.timestamp).toISOString(),
    reasonCode: [
      {
        text: referral.reason
      }
    ],
    description: referral.clinicalSummary,
    supportingInfo: referral.attachments.map(att => ({
      reference: att
    }))
  };
}

/**
 * Download file to user's device
 */
export function downloadFile(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Export referral as JSON
 */
export function exportToJSON(referral: ReferralOutput): Blob {
  const json = JSON.stringify(referral, null, 2);
  return new Blob([json], { type: 'application/json' });
}

/**
 * Export FHIR as JSON
 */
export function exportFHIRToJSON(fhir: FHIRReferralRequest): Blob {
  const json = JSON.stringify(fhir, null, 2);
  return new Blob([json], { type: 'application/fhir+json' });
}